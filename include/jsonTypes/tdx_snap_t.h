/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: ./json_template\tdx_snap_t.json
* Type name: tdx_snap_t
* Tester:    int tdx_snap_t_tester();
*
* Json keep-word: 
    "__default_value_fields__": [], # Take value in .json file as the default value of cpp variable
    "__optional_fields__": [], # Not require to present to .json file, but always in cpp struct
    "__assign_type_fields__": {"field":"cpp-type"}, # Assign specal cpp-type of field, but not infer automatically as default.
    "__assign_enum_fields__": {"field":"enum-type"}, # Assign specal enum-type of field, but not infer automatically as default.
                              enum-type need have implemented <enum-type>_toSting() & <enum-type>_fromString() functions.
    "__assign_set_lists__": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__cpp_eq_eclude__":[],     # List of variables not involved in equal compare.
    "__comment__xxx":"", # Add comment line
    "__sqlite_capable__":"", # enable sqlite tableIO autogen
    "__sqlite_primary__":"", # assign the primary key of sqlite, if not assigned, first existing col of [ 'id', 'date', 'mktCode', 'datetime', 'code'] will be assigned automatically.
* Script author: ChinSaiki<chinsaiki@outlook.com>
*/
#pragma once


#include <assert.h>
#include "common/s4json_util.h"
#include "common/s4logger.h"
#include "types/s4type.h"
#include "types/s4convertors.h"

#include <set>
#include <list>
#include <vector>

namespace S4 {

/* type */
struct tdx_snap_t {
	time_date_t date;	//	0
	time_minuSec_t minuSec;	//	0
	time_utcSec_t time;	//	0
	mktCodeI_t mktCode;	//	0
	//active1增加1，表示这期间发生过成交。如果没有成交，每次快照给出的时间戳、五档价格和委托量都是可能变动的，但active1不变。如果active1增加1，那么总量，总金额一定会变。
	uint16_t active1;	//	0
	price_t price;	//	0
	price_t last_close;	//	0
	price_t open;	//	0
	price_t high;	//	0
	price_t low;	//	0
	int ms;	//	0
	//总量
	vol_tdx_t vol;	//	0
	//现量
	vol_tdx_t cur_vol;	//	0
	amount_t amount;	//	0.0
	vol_tdx_t s_vol;	//	0
	vol_tdx_t b_vol;	//	0
	price_t bid1;	//	0
	price_t ask1;	//	0
	vol_tdx_t bid_vol1;	//	0
	vol_tdx_t ask_vol1;	//	0
	price_t bid2;	//	0
	price_t ask2;	//	0
	vol_tdx_t bid_vol2;	//	0
	vol_tdx_t ask_vol2;	//	0
	price_t bid3;	//	0
	price_t ask3;	//	0
	vol_tdx_t bid_vol3;	//	0
	vol_tdx_t ask_vol3;	//	0
	price_t bid4;	//	0
	price_t ask4;	//	0
	vol_tdx_t bid_vol4;	//	0
	vol_tdx_t ask_vol4;	//	0
	price_t bid5;	//	0
	price_t ask5;	//	0
	vol_tdx_t bid_vol5;	//	0
	vol_tdx_t ask_vol5;	//	0
	uint32_t reversed_bytes0;	//	0
	//-价格*100
	uint32_t reversed_bytes1;	//	0
	//市场
	uint32_t reversed_bytes2;	//	0
	uint32_t reversed_bytes3;	//	0
	uint16_t reversed_bytes4;	//	0
	uint32_t reversed_bytes5;	//	0
	uint32_t reversed_bytes6;	//	0
	uint32_t reversed_bytes7;	//	0
	uint32_t reversed_bytes8;	//	0
	//涨速
	uint16_t reversed_bytes9;	//	0
	//活跃度
	uint16_t active2;	//	0
	time_utcSec_t lcl_time;	//	0
	std::string lcl_time_str;	//	
	int VERSION;	//	0

	/* from json */
	static bool from_json(const nlohmann::json& json_var, tdx_snap_t& tdx_snap_t_var){
		try{
			if(json_var.find("date") != json_var.end()){
				try{
					const auto& json_var_date = json_var.at("date");
					json_var_date.get_to(tdx_snap_t_var.date);
				}catch(const std::exception& e){
					ERR("Convert \"date\" to \"time_date_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"date\" not found in json!");
				return false;
			}
			if(json_var.find("minuSec") != json_var.end()){
				try{
					const auto& json_var_minuSec = json_var.at("minuSec");
					json_var_minuSec.get_to(tdx_snap_t_var.minuSec);
				}catch(const std::exception& e){
					ERR("Convert \"minuSec\" to \"time_minuSec_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"minuSec\" not found in json!");
				return false;
			}
			if(json_var.find("time") != json_var.end()){
				try{
					const auto& json_var_time = json_var.at("time");
					json_var_time.get_to(tdx_snap_t_var.time);
				}catch(const std::exception& e){
					ERR("Convert \"time\" to \"time_utcSec_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"time\" not found in json!");
				return false;
			}
			if(json_var.find("mktCode") != json_var.end()){
				try{
					const auto& json_var_mktCode = json_var.at("mktCode");
					json_var_mktCode.get_to(tdx_snap_t_var.mktCode);
				}catch(const std::exception& e){
					ERR("Convert \"mktCode\" to \"mktCodeI_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"mktCode\" not found in json!");
				return false;
			}
			if(json_var.find("active1") != json_var.end()){
				try{
					const auto& json_var_active1 = json_var.at("active1");
					if (json_var_active1.is_string())
					    tdx_snap_t_var.active1 = IntConvertor::convert(json_var_active1.get<std::string>());
					else
					    json_var_active1.get_to(tdx_snap_t_var.active1);
				}catch(const std::exception& e){
					ERR("Convert \"active1\" to \"uint16_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"active1\" not found in json!");
				return false;
			}
			if(json_var.find("price") != json_var.end()){
				try{
					const auto& json_var_price = json_var.at("price");
					json_var_price.get_to(tdx_snap_t_var.price);
				}catch(const std::exception& e){
					ERR("Convert \"price\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"price\" not found in json!");
				return false;
			}
			if(json_var.find("last_close") != json_var.end()){
				try{
					const auto& json_var_last_close = json_var.at("last_close");
					json_var_last_close.get_to(tdx_snap_t_var.last_close);
				}catch(const std::exception& e){
					ERR("Convert \"last_close\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"last_close\" not found in json!");
				return false;
			}
			if(json_var.find("open") != json_var.end()){
				try{
					const auto& json_var_open = json_var.at("open");
					json_var_open.get_to(tdx_snap_t_var.open);
				}catch(const std::exception& e){
					ERR("Convert \"open\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"open\" not found in json!");
				return false;
			}
			if(json_var.find("high") != json_var.end()){
				try{
					const auto& json_var_high = json_var.at("high");
					json_var_high.get_to(tdx_snap_t_var.high);
				}catch(const std::exception& e){
					ERR("Convert \"high\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"high\" not found in json!");
				return false;
			}
			if(json_var.find("low") != json_var.end()){
				try{
					const auto& json_var_low = json_var.at("low");
					json_var_low.get_to(tdx_snap_t_var.low);
				}catch(const std::exception& e){
					ERR("Convert \"low\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"low\" not found in json!");
				return false;
			}
			if(json_var.find("ms") != json_var.end()){
				try{
					const auto& json_var_ms = json_var.at("ms");
					if (json_var_ms.is_string())
					    tdx_snap_t_var.ms = IntConvertor::convert(json_var_ms.get<std::string>());
					else
					    json_var_ms.get_to(tdx_snap_t_var.ms);
				}catch(const std::exception& e){
					ERR("Convert \"ms\" to \"int\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ms\" not found in json!");
				return false;
			}
			if(json_var.find("vol") != json_var.end()){
				try{
					const auto& json_var_vol = json_var.at("vol");
					json_var_vol.get_to(tdx_snap_t_var.vol);
				}catch(const std::exception& e){
					ERR("Convert \"vol\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"vol\" not found in json!");
				return false;
			}
			if(json_var.find("cur_vol") != json_var.end()){
				try{
					const auto& json_var_cur_vol = json_var.at("cur_vol");
					json_var_cur_vol.get_to(tdx_snap_t_var.cur_vol);
				}catch(const std::exception& e){
					ERR("Convert \"cur_vol\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"cur_vol\" not found in json!");
				return false;
			}
			if(json_var.find("amount") != json_var.end()){
				try{
					const auto& json_var_amount = json_var.at("amount");
					json_var_amount.get_to(tdx_snap_t_var.amount);
				}catch(const std::exception& e){
					ERR("Convert \"amount\" to \"amount_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"amount\" not found in json!");
				return false;
			}
			if(json_var.find("s_vol") != json_var.end()){
				try{
					const auto& json_var_s_vol = json_var.at("s_vol");
					json_var_s_vol.get_to(tdx_snap_t_var.s_vol);
				}catch(const std::exception& e){
					ERR("Convert \"s_vol\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"s_vol\" not found in json!");
				return false;
			}
			if(json_var.find("b_vol") != json_var.end()){
				try{
					const auto& json_var_b_vol = json_var.at("b_vol");
					json_var_b_vol.get_to(tdx_snap_t_var.b_vol);
				}catch(const std::exception& e){
					ERR("Convert \"b_vol\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"b_vol\" not found in json!");
				return false;
			}
			if(json_var.find("bid1") != json_var.end()){
				try{
					const auto& json_var_bid1 = json_var.at("bid1");
					json_var_bid1.get_to(tdx_snap_t_var.bid1);
				}catch(const std::exception& e){
					ERR("Convert \"bid1\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid1\" not found in json!");
				return false;
			}
			if(json_var.find("ask1") != json_var.end()){
				try{
					const auto& json_var_ask1 = json_var.at("ask1");
					json_var_ask1.get_to(tdx_snap_t_var.ask1);
				}catch(const std::exception& e){
					ERR("Convert \"ask1\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask1\" not found in json!");
				return false;
			}
			if(json_var.find("bid_vol1") != json_var.end()){
				try{
					const auto& json_var_bid_vol1 = json_var.at("bid_vol1");
					json_var_bid_vol1.get_to(tdx_snap_t_var.bid_vol1);
				}catch(const std::exception& e){
					ERR("Convert \"bid_vol1\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid_vol1\" not found in json!");
				return false;
			}
			if(json_var.find("ask_vol1") != json_var.end()){
				try{
					const auto& json_var_ask_vol1 = json_var.at("ask_vol1");
					json_var_ask_vol1.get_to(tdx_snap_t_var.ask_vol1);
				}catch(const std::exception& e){
					ERR("Convert \"ask_vol1\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask_vol1\" not found in json!");
				return false;
			}
			if(json_var.find("bid2") != json_var.end()){
				try{
					const auto& json_var_bid2 = json_var.at("bid2");
					json_var_bid2.get_to(tdx_snap_t_var.bid2);
				}catch(const std::exception& e){
					ERR("Convert \"bid2\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid2\" not found in json!");
				return false;
			}
			if(json_var.find("ask2") != json_var.end()){
				try{
					const auto& json_var_ask2 = json_var.at("ask2");
					json_var_ask2.get_to(tdx_snap_t_var.ask2);
				}catch(const std::exception& e){
					ERR("Convert \"ask2\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask2\" not found in json!");
				return false;
			}
			if(json_var.find("bid_vol2") != json_var.end()){
				try{
					const auto& json_var_bid_vol2 = json_var.at("bid_vol2");
					json_var_bid_vol2.get_to(tdx_snap_t_var.bid_vol2);
				}catch(const std::exception& e){
					ERR("Convert \"bid_vol2\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid_vol2\" not found in json!");
				return false;
			}
			if(json_var.find("ask_vol2") != json_var.end()){
				try{
					const auto& json_var_ask_vol2 = json_var.at("ask_vol2");
					json_var_ask_vol2.get_to(tdx_snap_t_var.ask_vol2);
				}catch(const std::exception& e){
					ERR("Convert \"ask_vol2\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask_vol2\" not found in json!");
				return false;
			}
			if(json_var.find("bid3") != json_var.end()){
				try{
					const auto& json_var_bid3 = json_var.at("bid3");
					json_var_bid3.get_to(tdx_snap_t_var.bid3);
				}catch(const std::exception& e){
					ERR("Convert \"bid3\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid3\" not found in json!");
				return false;
			}
			if(json_var.find("ask3") != json_var.end()){
				try{
					const auto& json_var_ask3 = json_var.at("ask3");
					json_var_ask3.get_to(tdx_snap_t_var.ask3);
				}catch(const std::exception& e){
					ERR("Convert \"ask3\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask3\" not found in json!");
				return false;
			}
			if(json_var.find("bid_vol3") != json_var.end()){
				try{
					const auto& json_var_bid_vol3 = json_var.at("bid_vol3");
					json_var_bid_vol3.get_to(tdx_snap_t_var.bid_vol3);
				}catch(const std::exception& e){
					ERR("Convert \"bid_vol3\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid_vol3\" not found in json!");
				return false;
			}
			if(json_var.find("ask_vol3") != json_var.end()){
				try{
					const auto& json_var_ask_vol3 = json_var.at("ask_vol3");
					json_var_ask_vol3.get_to(tdx_snap_t_var.ask_vol3);
				}catch(const std::exception& e){
					ERR("Convert \"ask_vol3\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask_vol3\" not found in json!");
				return false;
			}
			if(json_var.find("bid4") != json_var.end()){
				try{
					const auto& json_var_bid4 = json_var.at("bid4");
					json_var_bid4.get_to(tdx_snap_t_var.bid4);
				}catch(const std::exception& e){
					ERR("Convert \"bid4\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid4\" not found in json!");
				return false;
			}
			if(json_var.find("ask4") != json_var.end()){
				try{
					const auto& json_var_ask4 = json_var.at("ask4");
					json_var_ask4.get_to(tdx_snap_t_var.ask4);
				}catch(const std::exception& e){
					ERR("Convert \"ask4\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask4\" not found in json!");
				return false;
			}
			if(json_var.find("bid_vol4") != json_var.end()){
				try{
					const auto& json_var_bid_vol4 = json_var.at("bid_vol4");
					json_var_bid_vol4.get_to(tdx_snap_t_var.bid_vol4);
				}catch(const std::exception& e){
					ERR("Convert \"bid_vol4\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid_vol4\" not found in json!");
				return false;
			}
			if(json_var.find("ask_vol4") != json_var.end()){
				try{
					const auto& json_var_ask_vol4 = json_var.at("ask_vol4");
					json_var_ask_vol4.get_to(tdx_snap_t_var.ask_vol4);
				}catch(const std::exception& e){
					ERR("Convert \"ask_vol4\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask_vol4\" not found in json!");
				return false;
			}
			if(json_var.find("bid5") != json_var.end()){
				try{
					const auto& json_var_bid5 = json_var.at("bid5");
					json_var_bid5.get_to(tdx_snap_t_var.bid5);
				}catch(const std::exception& e){
					ERR("Convert \"bid5\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid5\" not found in json!");
				return false;
			}
			if(json_var.find("ask5") != json_var.end()){
				try{
					const auto& json_var_ask5 = json_var.at("ask5");
					json_var_ask5.get_to(tdx_snap_t_var.ask5);
				}catch(const std::exception& e){
					ERR("Convert \"ask5\" to \"price_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask5\" not found in json!");
				return false;
			}
			if(json_var.find("bid_vol5") != json_var.end()){
				try{
					const auto& json_var_bid_vol5 = json_var.at("bid_vol5");
					json_var_bid_vol5.get_to(tdx_snap_t_var.bid_vol5);
				}catch(const std::exception& e){
					ERR("Convert \"bid_vol5\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"bid_vol5\" not found in json!");
				return false;
			}
			if(json_var.find("ask_vol5") != json_var.end()){
				try{
					const auto& json_var_ask_vol5 = json_var.at("ask_vol5");
					json_var_ask_vol5.get_to(tdx_snap_t_var.ask_vol5);
				}catch(const std::exception& e){
					ERR("Convert \"ask_vol5\" to \"vol_tdx_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"ask_vol5\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes0") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes0 = json_var.at("reversed_bytes0");
					if (json_var_reversed_bytes0.is_string())
					    tdx_snap_t_var.reversed_bytes0 = IntConvertor::convert(json_var_reversed_bytes0.get<std::string>());
					else
					    json_var_reversed_bytes0.get_to(tdx_snap_t_var.reversed_bytes0);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes0\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes0\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes1") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes1 = json_var.at("reversed_bytes1");
					if (json_var_reversed_bytes1.is_string())
					    tdx_snap_t_var.reversed_bytes1 = IntConvertor::convert(json_var_reversed_bytes1.get<std::string>());
					else
					    json_var_reversed_bytes1.get_to(tdx_snap_t_var.reversed_bytes1);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes1\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes1\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes2") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes2 = json_var.at("reversed_bytes2");
					if (json_var_reversed_bytes2.is_string())
					    tdx_snap_t_var.reversed_bytes2 = IntConvertor::convert(json_var_reversed_bytes2.get<std::string>());
					else
					    json_var_reversed_bytes2.get_to(tdx_snap_t_var.reversed_bytes2);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes2\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes2\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes3") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes3 = json_var.at("reversed_bytes3");
					if (json_var_reversed_bytes3.is_string())
					    tdx_snap_t_var.reversed_bytes3 = IntConvertor::convert(json_var_reversed_bytes3.get<std::string>());
					else
					    json_var_reversed_bytes3.get_to(tdx_snap_t_var.reversed_bytes3);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes3\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes3\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes4") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes4 = json_var.at("reversed_bytes4");
					if (json_var_reversed_bytes4.is_string())
					    tdx_snap_t_var.reversed_bytes4 = IntConvertor::convert(json_var_reversed_bytes4.get<std::string>());
					else
					    json_var_reversed_bytes4.get_to(tdx_snap_t_var.reversed_bytes4);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes4\" to \"uint16_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes4\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes5") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes5 = json_var.at("reversed_bytes5");
					if (json_var_reversed_bytes5.is_string())
					    tdx_snap_t_var.reversed_bytes5 = IntConvertor::convert(json_var_reversed_bytes5.get<std::string>());
					else
					    json_var_reversed_bytes5.get_to(tdx_snap_t_var.reversed_bytes5);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes5\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes5\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes6") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes6 = json_var.at("reversed_bytes6");
					if (json_var_reversed_bytes6.is_string())
					    tdx_snap_t_var.reversed_bytes6 = IntConvertor::convert(json_var_reversed_bytes6.get<std::string>());
					else
					    json_var_reversed_bytes6.get_to(tdx_snap_t_var.reversed_bytes6);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes6\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes6\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes7") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes7 = json_var.at("reversed_bytes7");
					if (json_var_reversed_bytes7.is_string())
					    tdx_snap_t_var.reversed_bytes7 = IntConvertor::convert(json_var_reversed_bytes7.get<std::string>());
					else
					    json_var_reversed_bytes7.get_to(tdx_snap_t_var.reversed_bytes7);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes7\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes7\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes8") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes8 = json_var.at("reversed_bytes8");
					if (json_var_reversed_bytes8.is_string())
					    tdx_snap_t_var.reversed_bytes8 = IntConvertor::convert(json_var_reversed_bytes8.get<std::string>());
					else
					    json_var_reversed_bytes8.get_to(tdx_snap_t_var.reversed_bytes8);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes8\" to \"uint32_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes8\" not found in json!");
				return false;
			}
			if(json_var.find("reversed_bytes9") != json_var.end()){
				try{
					const auto& json_var_reversed_bytes9 = json_var.at("reversed_bytes9");
					if (json_var_reversed_bytes9.is_string())
					    tdx_snap_t_var.reversed_bytes9 = IntConvertor::convert(json_var_reversed_bytes9.get<std::string>());
					else
					    json_var_reversed_bytes9.get_to(tdx_snap_t_var.reversed_bytes9);
				}catch(const std::exception& e){
					ERR("Convert \"reversed_bytes9\" to \"uint16_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"reversed_bytes9\" not found in json!");
				return false;
			}
			if(json_var.find("active2") != json_var.end()){
				try{
					const auto& json_var_active2 = json_var.at("active2");
					if (json_var_active2.is_string())
					    tdx_snap_t_var.active2 = IntConvertor::convert(json_var_active2.get<std::string>());
					else
					    json_var_active2.get_to(tdx_snap_t_var.active2);
				}catch(const std::exception& e){
					ERR("Convert \"active2\" to \"uint16_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"active2\" not found in json!");
				return false;
			}
			if(json_var.find("lcl_time") != json_var.end()){
				try{
					const auto& json_var_lcl_time = json_var.at("lcl_time");
					json_var_lcl_time.get_to(tdx_snap_t_var.lcl_time);
				}catch(const std::exception& e){
					ERR("Convert \"lcl_time\" to \"time_utcSec_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"lcl_time\" not found in json!");
				return false;
			}
			if(json_var.find("lcl_time_str") != json_var.end()){
				try{
					const auto& json_var_lcl_time_str = json_var.at("lcl_time_str");
					json_var_lcl_time_str.get_to(tdx_snap_t_var.lcl_time_str);
				}catch(const std::exception& e){
					ERR("Convert \"lcl_time_str\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"lcl_time_str\" not found in json!");
				return false;
			}
			if(json_var.find("VERSION") != json_var.end()){
				try{
					const auto& json_var_VERSION = json_var.at("VERSION");
					if (json_var_VERSION.is_string())
					    tdx_snap_t_var.VERSION = IntConvertor::convert(json_var_VERSION.get<std::string>());
					else
					    json_var_VERSION.get_to(tdx_snap_t_var.VERSION);
				}catch(const std::exception& e){
					ERR("Convert \"VERSION\" to \"int\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"VERSION\" not found in json!");
				return false;
			}
		}catch (const std::exception& e){
			ERR("parse json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
	/* to json */
	static bool to_json(nlohmann::json& json_var, const tdx_snap_t& tdx_snap_t_var){
		try{
			json_var["date"] = tdx_snap_t_var.date;
			json_var["minuSec"] = tdx_snap_t_var.minuSec;
			json_var["time"] = tdx_snap_t_var.time;
			json_var["mktCode"] = tdx_snap_t_var.mktCode;
			json_var["active1"] = tdx_snap_t_var.active1;
			json_var["price"] = tdx_snap_t_var.price;
			json_var["last_close"] = tdx_snap_t_var.last_close;
			json_var["open"] = tdx_snap_t_var.open;
			json_var["high"] = tdx_snap_t_var.high;
			json_var["low"] = tdx_snap_t_var.low;
			json_var["ms"] = tdx_snap_t_var.ms;
			json_var["vol"] = tdx_snap_t_var.vol;
			json_var["cur_vol"] = tdx_snap_t_var.cur_vol;
			json_var["amount"] = tdx_snap_t_var.amount;
			json_var["s_vol"] = tdx_snap_t_var.s_vol;
			json_var["b_vol"] = tdx_snap_t_var.b_vol;
			json_var["bid1"] = tdx_snap_t_var.bid1;
			json_var["ask1"] = tdx_snap_t_var.ask1;
			json_var["bid_vol1"] = tdx_snap_t_var.bid_vol1;
			json_var["ask_vol1"] = tdx_snap_t_var.ask_vol1;
			json_var["bid2"] = tdx_snap_t_var.bid2;
			json_var["ask2"] = tdx_snap_t_var.ask2;
			json_var["bid_vol2"] = tdx_snap_t_var.bid_vol2;
			json_var["ask_vol2"] = tdx_snap_t_var.ask_vol2;
			json_var["bid3"] = tdx_snap_t_var.bid3;
			json_var["ask3"] = tdx_snap_t_var.ask3;
			json_var["bid_vol3"] = tdx_snap_t_var.bid_vol3;
			json_var["ask_vol3"] = tdx_snap_t_var.ask_vol3;
			json_var["bid4"] = tdx_snap_t_var.bid4;
			json_var["ask4"] = tdx_snap_t_var.ask4;
			json_var["bid_vol4"] = tdx_snap_t_var.bid_vol4;
			json_var["ask_vol4"] = tdx_snap_t_var.ask_vol4;
			json_var["bid5"] = tdx_snap_t_var.bid5;
			json_var["ask5"] = tdx_snap_t_var.ask5;
			json_var["bid_vol5"] = tdx_snap_t_var.bid_vol5;
			json_var["ask_vol5"] = tdx_snap_t_var.ask_vol5;
			json_var["reversed_bytes0"] = tdx_snap_t_var.reversed_bytes0;
			json_var["reversed_bytes1"] = tdx_snap_t_var.reversed_bytes1;
			json_var["reversed_bytes2"] = tdx_snap_t_var.reversed_bytes2;
			json_var["reversed_bytes3"] = tdx_snap_t_var.reversed_bytes3;
			json_var["reversed_bytes4"] = tdx_snap_t_var.reversed_bytes4;
			json_var["reversed_bytes5"] = tdx_snap_t_var.reversed_bytes5;
			json_var["reversed_bytes6"] = tdx_snap_t_var.reversed_bytes6;
			json_var["reversed_bytes7"] = tdx_snap_t_var.reversed_bytes7;
			json_var["reversed_bytes8"] = tdx_snap_t_var.reversed_bytes8;
			json_var["reversed_bytes9"] = tdx_snap_t_var.reversed_bytes9;
			json_var["active2"] = tdx_snap_t_var.active2;
			json_var["lcl_time"] = tdx_snap_t_var.lcl_time;
			json_var["lcl_time_str"] = tdx_snap_t_var.lcl_time_str;
			json_var["VERSION"] = tdx_snap_t_var.VERSION;
		}catch (const std::exception& e){
		ERR("to json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}

	bool operator ==(const tdx_snap_t& d) const
	{
		if (mktCode == d.mktCode &&
			active1 == d.active1 &&
			price == d.price &&
			last_close == d.last_close &&
			open == d.open &&
			high == d.high &&
			low == d.low &&
			vol == d.vol &&
			cur_vol == d.cur_vol &&
			amount == d.amount &&
			s_vol == d.s_vol &&
			b_vol == d.b_vol &&
			bid1 == d.bid1 &&
			ask1 == d.ask1 &&
			bid_vol1 == d.bid_vol1 &&
			ask_vol1 == d.ask_vol1 &&
			bid2 == d.bid2 &&
			ask2 == d.ask2 &&
			bid_vol2 == d.bid_vol2 &&
			ask_vol2 == d.ask_vol2 &&
			bid3 == d.bid3 &&
			ask3 == d.ask3 &&
			bid_vol3 == d.bid_vol3 &&
			ask_vol3 == d.ask_vol3 &&
			bid4 == d.bid4 &&
			ask4 == d.ask4 &&
			bid_vol4 == d.bid_vol4 &&
			ask_vol4 == d.ask_vol4 &&
			bid5 == d.bid5 &&
			ask5 == d.ask5 &&
			bid_vol5 == d.bid_vol5 &&
			ask_vol5 == d.ask_vol5)
		{
			return true;
		}
		return false;
	}

	bool operator !=(const tdx_snap_t& d) const
	{
		return !((*this)==d);
	}

};// struct tdx_snap_t
} // namespace S4


        /* Tester */
        inline int tdx_snap_t_tester() {

            //std::ifstream i("G:/work2t/99_s3/s4/./json_template/tdx_snap_t.json");
            std::string i("{    \"__sqlite_capable__\" : true,    \"__sqlite_primary__\" : \"time\",    \"__assign_type_fields__\": {        \"date\":\"time_date_t\",        \"minuSec\":\"time_minuSec_t\",        \"time\":\"time_utcSec_t\",        \"mktCode\":\"mktCodeI_t\",        \"active1\": \"uint16_t\",        \"price\": \"price_t\",        \"last_close\": \"price_t\",        \"open\": \"price_t\",        \"high\": \"price_t\",        \"low\": \"price_t\",        \"vol\": \"vol_tdx_t\",        \"cur_vol\": \"vol_tdx_t\",        \"amount\": \"amount_t\",        \"s_vol\": \"vol_tdx_t\",        \"b_vol\": \"vol_tdx_t\",        \"bid1\":\"price_t\",        \"ask1\":\"price_t\",        \"bid_vol1\":\"vol_tdx_t\",        \"ask_vol1\":\"vol_tdx_t\",        \"bid2\":\"price_t\",        \"ask2\":\"price_t\",        \"bid_vol2\":\"vol_tdx_t\",        \"ask_vol2\":\"vol_tdx_t\",        \"bid3\":\"price_t\",        \"ask3\":\"price_t\",        \"bid_vol3\":\"vol_tdx_t\",        \"ask_vol3\":\"vol_tdx_t\",        \"bid4\":\"price_t\",        \"ask4\":\"price_t\",        \"bid_vol4\":\"vol_tdx_t\",        \"ask_vol4\":\"vol_tdx_t\",        \"bid5\":\"price_t\",        \"ask5\":\"price_t\",        \"bid_vol5\":\"vol_tdx_t\",        \"ask_vol5\":\"vol_tdx_t\",        \"reversed_bytes0\":\"uint32_t\",        \"reversed_bytes1\":\"uint32_t\",        \"reversed_bytes2\":\"uint32_t\",        \"reversed_bytes3\":\"uint32_t\",        \"reversed_bytes4\":\"uint16_t\",        \"reversed_bytes5\":\"uint32_t\",        \"reversed_bytes6\":\"uint32_t\",        \"reversed_bytes7\":\"uint32_t\",        \"reversed_bytes8\":\"uint32_t\",        \"reversed_bytes9\":\"uint16_t\",        \"active2\":\"uint16_t\",        \"lcl_time\":\"time_utcSec_t\"    },    \"__cpp_eq_eclude__\":[        \"date\",        \"minuSec\",        \"time\",        \"ms\",        \"reversed_bytes0\",        \"reversed_bytes1\",        \"reversed_bytes2\",        \"reversed_bytes3\",        \"reversed_bytes4\",        \"reversed_bytes5\",        \"reversed_bytes6\",        \"reversed_bytes7\",        \"reversed_bytes8\",        \"reversed_bytes9\",        \"active2\",        \"lcl_time\",        \"lcl_time_str\",        \"VERSION\"    ],	\"date\":0,	\"minuSec\":0,	\"time\":0,	\"mktCode\": 0,    \"__comment__0\": \"active1增加1，表示这期间发生过成交。如果没有成交，每次快照给出的时间戳、五档价格和委托量都是可能变动的，但active1不变。如果active1增加1，那么总量，总金额一定会变。\",	\"active1\": 0,				\"price\":0,	\"last_close\":0,	\"open\":0,	\"high\":0,	\"low\":0,	\"ms\":0,    \"__comment__1\": \"总量\",	\"vol\":0,    \"__comment__2\": \"现量\",	\"cur_vol\":0,	\"amount\": 0.0,	\"s_vol\":0,	\"b_vol\":0,	\"bid1\":0,	\"ask1\":0,	\"bid_vol1\":0,	\"ask_vol1\":0,	\"bid2\":0,	\"ask2\":0,	\"bid_vol2\":0,	\"ask_vol2\":0,	\"bid3\":0,	\"ask3\":0,	\"bid_vol3\":0,	\"ask_vol3\":0,	\"bid4\":0,	\"ask4\":0,	\"bid_vol4\":0,	\"ask_vol4\":0,	\"bid5\":0,	\"ask5\":0,	\"bid_vol5\":0,	\"ask_vol5\":0,	\"reversed_bytes0\":0,    \"__comment__3\":\"-价格*100\",	\"reversed_bytes1\":0,    \"__comment__4\":\"市场\",	\"reversed_bytes2\":0,	\"reversed_bytes3\":0,	\"reversed_bytes4\":0,	\"reversed_bytes5\":0,	\"reversed_bytes6\":0,	\"reversed_bytes7\":0,	\"reversed_bytes8\":0,    \"__comment__5\":\"涨速\",	\"reversed_bytes9\":0,    \"__comment__6\":\"活跃度\",	\"active2\":0,	\"lcl_time\":0,    \"lcl_time_str\":\"\",    \"VERSION\":0}");
            nlohmann::json json_var;
            //i >> json_var; //from file
            json_var = nlohmann::json::parse(i);  //from string

            S4::tdx_snap_t tdx_snap_t_var;

            if(!S4::tdx_snap_t::from_json(json_var, tdx_snap_t_var)){
                INFO("S4::tdx_snap_t::from_json fail!");
                return -1;
            }

            nlohmann::json j_out;
            if(!S4::tdx_snap_t::to_json(j_out, tdx_snap_t_var)){
                INFO("S4::tdx_snap_t::to_json fail!");
                return -1;
            }

            INFO("{:}", j_out.dump(4));

            return 0;
        }

        