/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: ./json_template\qt_load_instrument_t.json
* Type name: qt_load_instrument_t
* Tester:    int qt_load_instrument_t_tester();
*
* Json keep-word: 
    "__default_value_fields__": [], # Take value in .json file as the default value of cpp variable
    "__optional_fields__": [], # Not require to present to .json file, but always in cpp struct
    "__assign_type_fields__": {"field":"cpp-type"}, # Assign specal cpp-type of field, but not infer automatically as default
    "__assign_set_lists__": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__comment__xxx":"", # Add comment line
    "__sqlite_capable__":"", # enable sqlite tableIO autogen
    "__sqlite_primary__":"", # assign the primary key of sqlite, if not assigned, first existing col of [ 'id', 'date', 'mktCode', 'datetime', 'code'] will be assigned automatically.
* Script author: ChinSaiki<chinsaiki@outlook.com>
*/
#pragma once


#include <assert.h>
#include "common/s4json_util.h"
#include "common/s4logger.h"
#include "types/s4type.h"

#include <set>
#include <list>
#include <vector>

namespace S4 {

/* type */
struct qt_load_instrument_t {
	std::string mktCode;	//	sz002810
	std::string stgName;	//	tdx_xyzq_history
	std::string tableName;	//	to20200531

	/* from json */
	static bool from_json(const nlohmann::json& json_var, qt_load_instrument_t& qt_load_instrument_t_var){
		try{
			try{
				qt_load_instrument_t_var.mktCode = json_var.at("mktCode").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "mktCode", e.what());
				throw e;
			}
			try{
				qt_load_instrument_t_var.stgName = json_var.at("stgName").get<std::string>();
			}catch(...){
			}
			try{
				qt_load_instrument_t_var.tableName = json_var.at("tableName").get<std::string>();
			}catch(...){
			}
		}catch (const std::exception& e){
			ERR("parse json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
	/* to json */
	static bool to_json(nlohmann::json& json_var, const qt_load_instrument_t& qt_load_instrument_t_var){
		try{
			json_var["mktCode"] = qt_load_instrument_t_var.mktCode;
			json_var["stgName"] = qt_load_instrument_t_var.stgName;
			json_var["tableName"] = qt_load_instrument_t_var.tableName;
		}catch (const std::exception& e){
		ERR("to json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}

	bool operator ==(const qt_load_instrument_t& d) const
	{
		if (mktCode == d.mktCode &&
			stgName == d.stgName &&
			tableName == d.tableName)
		{
			return true;
		}
		return false;
	}

	bool operator !=(const qt_load_instrument_t& d) const
	{
		return !((*this)==d);
	}

};// struct qt_load_instrument_t
} // namespace S4


        /* Tester */
        inline int qt_load_instrument_t_tester() {

            //std::ifstream i("E:/work/s4/./json_template/qt_load_instrument_t.json");
            std::string i("{    \"__optional_fields__\":[        \"stgName\",        \"tableName\"    ],    \"mktCode\" : \"sz002810\",        \"stgName\" : \"tdx_xyzq_history\",    \"tableName\": \"to20200531\"}");
            nlohmann::json json_var;
            //i >> json_var; //from file
            json_var = nlohmann::json::parse(i);  //from string

            S4::qt_load_instrument_t qt_load_instrument_t_var;

            if(!S4::qt_load_instrument_t::from_json(json_var, qt_load_instrument_t_var)){
                INFO("S4::qt_load_instrument_t::from_json fail!");
                return -1;
            }

            nlohmann::json j_out;
            if(!S4::qt_load_instrument_t::to_json(j_out, qt_load_instrument_t_var)){
                INFO("S4::qt_load_instrument_t::to_json fail!");
                return -1;
            }

            INFO("{:}", j_out.dump(4));

            return 0;
        }

        