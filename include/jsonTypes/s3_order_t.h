/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: ./json_template\s3_order_t.json
* Type name: s3_order_t
* Tester:    int s3_order_t_tester();
*
* Json keep-word: 
    "__default_value_fields__": [], # Take value in .json file as the default value of cpp variable
    "__optional_fields__": [], # Not require to present to .json file, but always in cpp struct
    "__assign_type_fields__": {"field":"cpp-type"}, # Assign specal cpp-type of field, but not infer automatically as default.
    "__assign_enum_fields__": {"field":"enum-type"}, # Assign specal enum-type of field, but not infer automatically as default.
                              enum-type need have implemented <enum-type>_toSting() & <enum-type>_fromString() functions.
    "__assign_set_lists__": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__cpp_eq_eclude__":[],     # List of variables not involved in equal compare.
    "__comment__xxx":"", # Add comment line
    "__sqlite_capable__":"", # enable sqlite tableIO autogen
    "__sqlite_primary__":"", # assign the primary key of sqlite, if not assigned, first existing col of [ 'id', 'date', 'mktCode', 'datetime', 'code'] will be assigned automatically.
* Script author: ChinSaiki<chinsaiki@outlook.com>
*/
#pragma once


#include <assert.h>
#include "common/s4json_util.h"
#include "common/s4logger.h"
#include "types/s4type.h"

#include <set>
#include <list>
#include <vector>

namespace S4 {

/* type */
struct s3_order_t {
	std::string StgName;	//	
	int64_t ID;	//	1
	std::string InsName;	//	
	time_utcSec_t time;	//	0
	std::string optType;	//	
	std::string status;	//	
	int open;	//	-1
	int take;	//	-1
	int stop;	//	-1
	int close;	//	-1
	int openA;	//	-1
	int closeA;	//	-1
	std::string datetime;	//	

	/* from json */
	static bool from_json(const nlohmann::json& json_var, s3_order_t& s3_order_t_var){
		try{
			try{
				s3_order_t_var.StgName = json_var.at("StgName").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "StgName", e.what());
				throw e;
			}
			try{
				s3_order_t_var.ID = json_var.at("ID").get<int64_t>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "ID", e.what());
				throw e;
			}
			try{
				s3_order_t_var.InsName = json_var.at("InsName").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "InsName", e.what());
				throw e;
			}
			try{
				s3_order_t_var.time = json_var.at("time").get<time_utcSec_t>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time", e.what());
				throw e;
			}
			try{
				s3_order_t_var.optType = json_var.at("optType").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "optType", e.what());
				throw e;
			}
			try{
				s3_order_t_var.status = json_var.at("status").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "status", e.what());
				throw e;
			}
			try{
				s3_order_t_var.open = json_var.at("open").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "open", e.what());
				throw e;
			}
			try{
				s3_order_t_var.take = json_var.at("take").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "take", e.what());
				throw e;
			}
			try{
				s3_order_t_var.stop = json_var.at("stop").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stop", e.what());
				throw e;
			}
			try{
				s3_order_t_var.close = json_var.at("close").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "close", e.what());
				throw e;
			}
			try{
				s3_order_t_var.openA = json_var.at("openA").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "openA", e.what());
				throw e;
			}
			try{
				s3_order_t_var.closeA = json_var.at("closeA").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "closeA", e.what());
				throw e;
			}
			try{
				s3_order_t_var.datetime = json_var.at("datetime").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "datetime", e.what());
				throw e;
			}
		}catch (const std::exception& e){
			ERR("parse json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
	/* to json */
	static bool to_json(nlohmann::json& json_var, const s3_order_t& s3_order_t_var){
		try{
			json_var["StgName"] = s3_order_t_var.StgName;
			json_var["ID"] = s3_order_t_var.ID;
			json_var["InsName"] = s3_order_t_var.InsName;
			json_var["time"] = s3_order_t_var.time;
			json_var["optType"] = s3_order_t_var.optType;
			json_var["status"] = s3_order_t_var.status;
			json_var["open"] = s3_order_t_var.open;
			json_var["take"] = s3_order_t_var.take;
			json_var["stop"] = s3_order_t_var.stop;
			json_var["close"] = s3_order_t_var.close;
			json_var["openA"] = s3_order_t_var.openA;
			json_var["closeA"] = s3_order_t_var.closeA;
			json_var["datetime"] = s3_order_t_var.datetime;
		}catch (const std::exception& e){
		ERR("to json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}

	bool operator ==(const s3_order_t& d) const
	{
		if (StgName == d.StgName &&
			ID == d.ID &&
			InsName == d.InsName &&
			time == d.time &&
			optType == d.optType &&
			status == d.status &&
			open == d.open &&
			take == d.take &&
			stop == d.stop &&
			close == d.close &&
			openA == d.openA &&
			closeA == d.closeA &&
			datetime == d.datetime)
		{
			return true;
		}
		return false;
	}

	bool operator !=(const s3_order_t& d) const
	{
		return !((*this)==d);
	}

};// struct s3_order_t
} // namespace S4


        /* Tester */
        inline int s3_order_t_tester() {

            //std::ifstream i("G:/work2t/99_s3/s4/./json_template/s3_order_t.json");
            std::string i("{    \"__sqlite_capable__\" : true,    \"__sqlite_primary__\" : \"ID, time, status\",    \"__assign_type_fields__\": {        \"time\":\"time_utcSec_t\",         \"ID\":\"int64_t\"    },    \"StgName\":\"\",	\"ID\":1,	\"InsName\":\"\",	\"time\":0,	\"optType\":\"\",	\"status\":\"\",	\"open\":-1,	\"take\":-1,	\"stop\":-1,	\"close\":-1,	\"openA\":-1,	\"closeA\":-1,	\"datetime\":\"\"}");
            nlohmann::json json_var;
            //i >> json_var; //from file
            json_var = nlohmann::json::parse(i);  //from string

            S4::s3_order_t s3_order_t_var;

            if(!S4::s3_order_t::from_json(json_var, s3_order_t_var)){
                INFO("S4::s3_order_t::from_json fail!");
                return -1;
            }

            nlohmann::json j_out;
            if(!S4::s3_order_t::to_json(j_out, s3_order_t_var)){
                INFO("S4::s3_order_t::to_json fail!");
                return -1;
            }

            INFO("{:}", j_out.dump(4));

            return 0;
        }

        