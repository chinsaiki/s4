/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: .\json_template\tdx_xyzq_history_t.json
* Type name: tdx_xyzq_history_t
* Tester:    int tdx_xyzq_history_t_tester();
*
* Json keep-word: 
    "default_value_fields": [], # Take value in .json file as the default value of cpp variable
    "optional_fields": [], # Not require to present to .json file, but always in cpp struct
    "assign_type_fields": {"field":"cpp-type"}, # Assign specal cpp-type of field, but not infer automatically as default
    "assign_set_lists": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__comment__xxx":"", # Add comment line
* Script author: ChenZaihui<chinsaiki@outlook.com>
*/
#pragma once
#include <assert.h>
#include "common/s4json_util.h"
#include "common/s4logger.h"

#include <set>
#include <list>
#include <vector>

namespace S4 {

/* type */
struct tdx_xyzq_history_t {
	struct deal_t {
		int date;	//	20200507
		std::string time_format;	//	19:55:30
		int time_utcSec;	//	123
		std::string stock_code;	//	002988
		std::string stock_name;	//	豪美新材
		int order_index;	//	26
		std::string opt_type;	//	买入
		double deal_price;	//	0.0
		int deal_vol;	//	27
		int deal_amount;	//	0
		int commission;	//	0
		int stamp_duty;	//	0
		int transfer_fee;	//	0
		int other_fees;	//	0
		std::string remarks;	//	起始配号:226168906
	};
	deal_t deal;
	struct order_t {
		int date;	//	20200507
		std::string time_format;	//	19:55:30
		int time_utcSec;	//	123
		std::string stock_code;	//	002988
		std::string stock_name;	//	豪美新材
		int order_index;	//	26
		std::string opt_type;	//	买入
		std::string status;	//	已报
		double order_price;	//	3.94
		int order_vol;	//	5600
		double deal_price;	//	0.0
		int deal_vol;	//	0
		std::string order_type;	//	买卖
	};
	order_t order;

	/* from json */
	static bool from_json(const json& json_var, tdx_xyzq_history_t& tdx_xyzq_history_t_var){
		try{
			const json& json_var_deal = json_var["deal"];
			try{
				tdx_xyzq_history_t_var.deal.date = json_var_deal.at("date").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "date", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.time_format = json_var_deal.at("time_format").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time_format", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.time_utcSec = json_var_deal.at("time_utcSec").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time_utcSec", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.stock_code = json_var_deal.at("stock_code").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stock_code", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.stock_name = json_var_deal.at("stock_name").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stock_name", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.order_index = json_var_deal.at("order_index").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_index", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.opt_type = json_var_deal.at("opt_type").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "opt_type", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.deal_price = json_var_deal.at("deal_price").get<double>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_price", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.deal_vol = json_var_deal.at("deal_vol").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_vol", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.deal_amount = json_var_deal.at("deal_amount").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_amount", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.commission = json_var_deal.at("commission").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "commission", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.stamp_duty = json_var_deal.at("stamp_duty").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stamp_duty", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.transfer_fee = json_var_deal.at("transfer_fee").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "transfer_fee", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.other_fees = json_var_deal.at("other_fees").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "other_fees", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.deal.remarks = json_var_deal.at("remarks").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "remarks", e.what());
				throw e;
			}
			const json& json_var_order = json_var["order"];
			try{
				tdx_xyzq_history_t_var.order.date = json_var_order.at("date").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "date", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.time_format = json_var_order.at("time_format").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time_format", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.time_utcSec = json_var_order.at("time_utcSec").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time_utcSec", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.stock_code = json_var_order.at("stock_code").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stock_code", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.stock_name = json_var_order.at("stock_name").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stock_name", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.order_index = json_var_order.at("order_index").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_index", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.opt_type = json_var_order.at("opt_type").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "opt_type", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.status = json_var_order.at("status").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "status", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.order_price = json_var_order.at("order_price").get<double>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_price", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.order_vol = json_var_order.at("order_vol").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_vol", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.deal_price = json_var_order.at("deal_price").get<double>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_price", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.deal_vol = json_var_order.at("deal_vol").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_vol", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_t_var.order.order_type = json_var_order.at("order_type").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_type", e.what());
				throw e;
			}
		}catch (const std::exception& e){
			ERR("parse json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
	/* to json */
	static bool to_json(json& json_var, const tdx_xyzq_history_t& tdx_xyzq_history_t_var){
		try{
			json json_var_deal;
			json_var_deal["date"] = tdx_xyzq_history_t_var.deal.date;
			json_var_deal["time_format"] = tdx_xyzq_history_t_var.deal.time_format;
			json_var_deal["time_utcSec"] = tdx_xyzq_history_t_var.deal.time_utcSec;
			json_var_deal["stock_code"] = tdx_xyzq_history_t_var.deal.stock_code;
			json_var_deal["stock_name"] = tdx_xyzq_history_t_var.deal.stock_name;
			json_var_deal["order_index"] = tdx_xyzq_history_t_var.deal.order_index;
			json_var_deal["opt_type"] = tdx_xyzq_history_t_var.deal.opt_type;
			json_var_deal["deal_price"] = tdx_xyzq_history_t_var.deal.deal_price;
			json_var_deal["deal_vol"] = tdx_xyzq_history_t_var.deal.deal_vol;
			json_var_deal["deal_amount"] = tdx_xyzq_history_t_var.deal.deal_amount;
			json_var_deal["commission"] = tdx_xyzq_history_t_var.deal.commission;
			json_var_deal["stamp_duty"] = tdx_xyzq_history_t_var.deal.stamp_duty;
			json_var_deal["transfer_fee"] = tdx_xyzq_history_t_var.deal.transfer_fee;
			json_var_deal["other_fees"] = tdx_xyzq_history_t_var.deal.other_fees;
			json_var_deal["remarks"] = tdx_xyzq_history_t_var.deal.remarks;
			json_var["deal"] = json_var_deal;
			json json_var_order;
			json_var_order["date"] = tdx_xyzq_history_t_var.order.date;
			json_var_order["time_format"] = tdx_xyzq_history_t_var.order.time_format;
			json_var_order["time_utcSec"] = tdx_xyzq_history_t_var.order.time_utcSec;
			json_var_order["stock_code"] = tdx_xyzq_history_t_var.order.stock_code;
			json_var_order["stock_name"] = tdx_xyzq_history_t_var.order.stock_name;
			json_var_order["order_index"] = tdx_xyzq_history_t_var.order.order_index;
			json_var_order["opt_type"] = tdx_xyzq_history_t_var.order.opt_type;
			json_var_order["status"] = tdx_xyzq_history_t_var.order.status;
			json_var_order["order_price"] = tdx_xyzq_history_t_var.order.order_price;
			json_var_order["order_vol"] = tdx_xyzq_history_t_var.order.order_vol;
			json_var_order["deal_price"] = tdx_xyzq_history_t_var.order.deal_price;
			json_var_order["deal_vol"] = tdx_xyzq_history_t_var.order.deal_vol;
			json_var_order["order_type"] = tdx_xyzq_history_t_var.order.order_type;
			json_var["order"] = json_var_order;
		}catch (const std::exception& e){
		ERR("to json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
};// struct tdx_xyzq_history_t
} // namespace S4


/* Tester */
inline int tdx_xyzq_history_t_tester() {

    //std::ifstream i("E:/work/s4/./json_template/tdx_xyzq_history_t.json");
    std::string i("{    \"deal\":{        \"date\" : 20200507,        \"time_format\": \"19:55:30\",        \"time_utcSec\": 123,        \"stock_code\": \"002988\",        \"stock_name\": \"豪美新材\",        \"order_index\":26,        \"opt_type\":\"买入\",        \"deal_price\" : 0.0,        \"deal_vol\" : 27,        \"deal_amount\":0,        \"commission\":0,        \"stamp_duty\":0,        \"transfer_fee\":0,        \"other_fees\":0,        \"remarks\":\"起始配号:226168906\"    },    \"order\":{        \"date\" : 20200507,        \"time_format\": \"19:55:30\",        \"time_utcSec\": 123,        \"stock_code\": \"002988\",        \"stock_name\": \"豪美新材\",        \"order_index\":26,        \"opt_type\":\"买入\",        \"status\":\"已报\",        \"order_price\":3.94,        \"order_vol\":5600,        \"deal_price\":0.0,        \"deal_vol\":0,        \"order_type\":\"买卖\"    }}");
    S4::json json_var;
    //i >> json_var; //from file
    json_var = S4::json::parse(i);  //from string

    S4::tdx_xyzq_history_t tdx_xyzq_history_t_var;

    if(!S4::tdx_xyzq_history_t::from_json(json_var, tdx_xyzq_history_t_var)){
        INFO("S4::tdx_xyzq_history_t::from_json fail!");
        return -1;
    }

    S4::json j_out;
    if(!S4::tdx_xyzq_history_t::to_json(j_out, tdx_xyzq_history_t_var)){
        INFO("S4::tdx_xyzq_history_t::to_json fail!");
        return -1;
    }

    INFO("{:}", j_out.dump(4));

    return 0;
}

