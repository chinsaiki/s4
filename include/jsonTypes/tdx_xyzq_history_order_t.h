/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: ./json_template\tdx_xyzq_history_order_t.json
* Type name: tdx_xyzq_history_order_t
* Tester:    int tdx_xyzq_history_order_t_tester();
*
* Json keep-word: 
    "__default_value_fields__": [], # Take value in .json file as the default value of cpp variable
    "__optional_fields__": [], # Not require to present to .json file, but always in cpp struct
    "__assign_type_fields__": {"field":"cpp-type"}, # Assign specal cpp-type of field, but not infer automatically as default.
    "__assign_enum_fields__": {"field":"enum-type"}, # Assign specal enum-type of field, but not infer automatically as default.
                              enum-type need have implemented <enum-type>_toSting() & <enum-type>_fromString() functions.
    "__assign_set_lists__": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__cpp_eq_eclude__":[],     # List of variables not involved in equal compare.
    "__comment__xxx":"", # Add comment line
    "__sqlite_capable__":"", # enable sqlite tableIO autogen
    "__sqlite_primary__":"", # assign the primary key of sqlite, if not assigned, first existing col of [ 'id', 'date', 'mktCode', 'datetime', 'code'] will be assigned automatically.
* Script author: ChinSaiki<chinsaiki@outlook.com>
*/
#pragma once


#include <assert.h>
#include "common/s4json_util.h"
#include "common/s4logger.h"
#include "types/s4type.h"
#include "types/s4convertors.h"

#include <set>
#include <list>
#include <vector>

namespace S4 {

/* type */
struct tdx_xyzq_history_order_t {
	time_date_t date;	//	20200507
	std::string time_format;	//	19:55:30
	time_utcSec_t time_utcSec;	//	123
	std::string stock_code;	//	002988
	std::string stock_name;	//	豪美新材
	int64_t id;	//	26
	std::string opt_type;	//	买入
	std::string delegate_type;	//	信用交易/撤单
	std::string status;	//	已报
	fprice_t order_price;	//	3.94
	vol_share_t order_vol;	//	5600
	fprice_t deal_price;	//	0.0
	vol_share_t deal_vol;	//	0
	std::string quote_mode;	//	买卖

	/* from json */
	static bool from_json(const nlohmann::json& json_var, tdx_xyzq_history_order_t& tdx_xyzq_history_order_t_var){
		try{
			if(json_var.find("date") != json_var.end()){
				try{
					const auto& json_var_date = json_var.at("date");
					json_var_date.get_to(tdx_xyzq_history_order_t_var.date);
				}catch(const std::exception& e){
					ERR("Convert \"date\" to \"time_date_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"date\" not found in json!");
				return false;
			}
			if(json_var.find("time_format") != json_var.end()){
				try{
					const auto& json_var_time_format = json_var.at("time_format");
					json_var_time_format.get_to(tdx_xyzq_history_order_t_var.time_format);
				}catch(const std::exception& e){
					ERR("Convert \"time_format\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"time_format\" not found in json!");
				return false;
			}
			if(json_var.find("time_utcSec") != json_var.end()){
				try{
					const auto& json_var_time_utcSec = json_var.at("time_utcSec");
					json_var_time_utcSec.get_to(tdx_xyzq_history_order_t_var.time_utcSec);
				}catch(const std::exception& e){
					ERR("Convert \"time_utcSec\" to \"time_utcSec_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"time_utcSec\" not found in json!");
				return false;
			}
			if(json_var.find("stock_code") != json_var.end()){
				try{
					const auto& json_var_stock_code = json_var.at("stock_code");
					json_var_stock_code.get_to(tdx_xyzq_history_order_t_var.stock_code);
				}catch(const std::exception& e){
					ERR("Convert \"stock_code\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"stock_code\" not found in json!");
				return false;
			}
			if(json_var.find("stock_name") != json_var.end()){
				try{
					const auto& json_var_stock_name = json_var.at("stock_name");
					json_var_stock_name.get_to(tdx_xyzq_history_order_t_var.stock_name);
				}catch(const std::exception& e){
					ERR("Convert \"stock_name\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"stock_name\" not found in json!");
				return false;
			}
			if(json_var.find("id") != json_var.end()){
				try{
					const auto& json_var_id = json_var.at("id");
					if (json_var_id.is_string())
					    tdx_xyzq_history_order_t_var.id = IntConvertor::convert(json_var_id.get<std::string>());
					else
					    json_var_id.get_to(tdx_xyzq_history_order_t_var.id);
				}catch(const std::exception& e){
					ERR("Convert \"id\" to \"int64_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"id\" not found in json!");
				return false;
			}
			if(json_var.find("opt_type") != json_var.end()){
				try{
					const auto& json_var_opt_type = json_var.at("opt_type");
					json_var_opt_type.get_to(tdx_xyzq_history_order_t_var.opt_type);
				}catch(const std::exception& e){
					ERR("Convert \"opt_type\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"opt_type\" not found in json!");
				return false;
			}
			if(json_var.find("delegate_type") != json_var.end()){
				try{
					const auto& json_var_delegate_type = json_var.at("delegate_type");
					json_var_delegate_type.get_to(tdx_xyzq_history_order_t_var.delegate_type);
				}catch(const std::exception& e){
					ERR("Convert \"delegate_type\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"delegate_type\" not found in json!");
				return false;
			}
			if(json_var.find("status") != json_var.end()){
				try{
					const auto& json_var_status = json_var.at("status");
					json_var_status.get_to(tdx_xyzq_history_order_t_var.status);
				}catch(const std::exception& e){
					ERR("Convert \"status\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"status\" not found in json!");
				return false;
			}
			if(json_var.find("order_price") != json_var.end()){
				try{
					const auto& json_var_order_price = json_var.at("order_price");
					json_var_order_price.get_to(tdx_xyzq_history_order_t_var.order_price);
				}catch(const std::exception& e){
					ERR("Convert \"order_price\" to \"fprice_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"order_price\" not found in json!");
				return false;
			}
			if(json_var.find("order_vol") != json_var.end()){
				try{
					const auto& json_var_order_vol = json_var.at("order_vol");
					json_var_order_vol.get_to(tdx_xyzq_history_order_t_var.order_vol);
				}catch(const std::exception& e){
					ERR("Convert \"order_vol\" to \"vol_share_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"order_vol\" not found in json!");
				return false;
			}
			if(json_var.find("deal_price") != json_var.end()){
				try{
					const auto& json_var_deal_price = json_var.at("deal_price");
					json_var_deal_price.get_to(tdx_xyzq_history_order_t_var.deal_price);
				}catch(const std::exception& e){
					ERR("Convert \"deal_price\" to \"fprice_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"deal_price\" not found in json!");
				return false;
			}
			if(json_var.find("deal_vol") != json_var.end()){
				try{
					const auto& json_var_deal_vol = json_var.at("deal_vol");
					json_var_deal_vol.get_to(tdx_xyzq_history_order_t_var.deal_vol);
				}catch(const std::exception& e){
					ERR("Convert \"deal_vol\" to \"vol_share_t\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"deal_vol\" not found in json!");
				return false;
			}
			if(json_var.find("quote_mode") != json_var.end()){
				try{
					const auto& json_var_quote_mode = json_var.at("quote_mode");
					json_var_quote_mode.get_to(tdx_xyzq_history_order_t_var.quote_mode);
				}catch(const std::exception& e){
					ERR("Convert \"quote_mode\" to \"std::string\" fail! e={:}", e.what());
					throw e;
				}
			}else{
				ERR("\"quote_mode\" not found in json!");
				return false;
			}
		}catch (const std::exception& e){
			ERR("parse json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
	/* to json */
	static bool to_json(nlohmann::json& json_var, const tdx_xyzq_history_order_t& tdx_xyzq_history_order_t_var){
		try{
			json_var["date"] = tdx_xyzq_history_order_t_var.date;
			json_var["time_format"] = tdx_xyzq_history_order_t_var.time_format;
			json_var["time_utcSec"] = tdx_xyzq_history_order_t_var.time_utcSec;
			json_var["stock_code"] = tdx_xyzq_history_order_t_var.stock_code;
			json_var["stock_name"] = tdx_xyzq_history_order_t_var.stock_name;
			json_var["id"] = tdx_xyzq_history_order_t_var.id;
			json_var["opt_type"] = tdx_xyzq_history_order_t_var.opt_type;
			json_var["delegate_type"] = tdx_xyzq_history_order_t_var.delegate_type;
			json_var["status"] = tdx_xyzq_history_order_t_var.status;
			json_var["order_price"] = tdx_xyzq_history_order_t_var.order_price;
			json_var["order_vol"] = tdx_xyzq_history_order_t_var.order_vol;
			json_var["deal_price"] = tdx_xyzq_history_order_t_var.deal_price;
			json_var["deal_vol"] = tdx_xyzq_history_order_t_var.deal_vol;
			json_var["quote_mode"] = tdx_xyzq_history_order_t_var.quote_mode;
		}catch (const std::exception& e){
		ERR("to json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}

	bool operator ==(const tdx_xyzq_history_order_t& d) const
	{
		if (date == d.date &&
			time_format == d.time_format &&
			time_utcSec == d.time_utcSec &&
			stock_code == d.stock_code &&
			stock_name == d.stock_name &&
			id == d.id &&
			opt_type == d.opt_type &&
			delegate_type == d.delegate_type &&
			status == d.status &&
			order_price == d.order_price &&
			order_vol == d.order_vol &&
			deal_price == d.deal_price &&
			deal_vol == d.deal_vol &&
			quote_mode == d.quote_mode)
		{
			return true;
		}
		return false;
	}

	bool operator !=(const tdx_xyzq_history_order_t& d) const
	{
		return !((*this)==d);
	}

};// struct tdx_xyzq_history_order_t
} // namespace S4


        /* Tester */
        inline int tdx_xyzq_history_order_t_tester() {

            //std::ifstream i("G:/work2t/99_s3/s4/./json_template/tdx_xyzq_history_order_t.json");
            std::string i("{    \"__assign_type_fields__\": {        \"date\":\"time_date_t\",         \"id\":\"int64_t\",         \"time_utcSec\":\"time_utcSec_t\",         \"deal_price\":\"fprice_t\",         \"order_price\":\"fprice_t\",         \"order_vol\":\"vol_share_t\",         \"deal_vol\":\"vol_share_t\"    },    \"__sqlite_capable__\" : true,    \"date\" : 20200507,    \"time_format\": \"19:55:30\",    \"time_utcSec\": 123,    \"stock_code\": \"002988\",    \"stock_name\": \"豪美新材\",    \"id\":26,    \"opt_type\":\"买入\",    \"delegate_type\":\"信用交易/撤单\",    \"status\":\"已报\",    \"order_price\":3.94,    \"order_vol\":5600,    \"deal_price\":0.0,    \"deal_vol\":0,    \"quote_mode\":\"买卖\"}");
            nlohmann::json json_var;
            //i >> json_var; //from file
            json_var = nlohmann::json::parse(i);  //from string

            S4::tdx_xyzq_history_order_t tdx_xyzq_history_order_t_var;

            if(!S4::tdx_xyzq_history_order_t::from_json(json_var, tdx_xyzq_history_order_t_var)){
                INFO("S4::tdx_xyzq_history_order_t::from_json fail!");
                return -1;
            }

            nlohmann::json j_out;
            if(!S4::tdx_xyzq_history_order_t::to_json(j_out, tdx_xyzq_history_order_t_var)){
                INFO("S4::tdx_xyzq_history_order_t::to_json fail!");
                return -1;
            }

            INFO("{:}", j_out.dump(4));

            return 0;
        }

        