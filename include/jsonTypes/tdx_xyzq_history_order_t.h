/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: .\json_template\tdx_xyzq_history_order_t.json
* Type name: tdx_xyzq_history_order_t
* Tester:    int tdx_xyzq_history_order_t_tester();
*
* Json keep-word: 
    "default_value_fields": [], # Take value in .json file as the default value of cpp variable
    "optional_fields": [], # Not require to present to .json file, but always in cpp struct
    "assign_type_fields": {"field":"cpp-type"}, # Assign specal cpp-type of field, but not infer automatically as default
    "assign_set_lists": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__comment__xxx":"", # Add comment line
* Script author: ChenZaihui<chinsaiki@outlook.com>
*/
#pragma once
#include <assert.h>
#include "common/s4json_util.h"
#include "common/s4logger.h"

#include <set>
#include <list>
#include <vector>

namespace S4 {

/* type */
struct tdx_xyzq_history_order_t {
	int date;	//	20200507
	std::string time_format;	//	19:55:30
	int time_utcSec;	//	123
	std::string stock_code;	//	002988
	std::string stock_name;	//	豪美新材
	int order_index;	//	26
	std::string opt_type;	//	买入
	std::string status;	//	已报
	double order_price;	//	3.94
	int order_vol;	//	5600
	double deal_price;	//	0.0
	int deal_vol;	//	0
	std::string order_type;	//	买卖

	/* from json */
	static bool from_json(const json& json_var, tdx_xyzq_history_order_t& tdx_xyzq_history_order_t_var){
		try{
			try{
				tdx_xyzq_history_order_t_var.date = json_var.at("date").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "date", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.time_format = json_var.at("time_format").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time_format", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.time_utcSec = json_var.at("time_utcSec").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "time_utcSec", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.stock_code = json_var.at("stock_code").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stock_code", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.stock_name = json_var.at("stock_name").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "stock_name", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.order_index = json_var.at("order_index").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_index", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.opt_type = json_var.at("opt_type").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "opt_type", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.status = json_var.at("status").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "status", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.order_price = json_var.at("order_price").get<double>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_price", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.order_vol = json_var.at("order_vol").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_vol", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.deal_price = json_var.at("deal_price").get<double>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_price", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.deal_vol = json_var.at("deal_vol").get<int>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "deal_vol", e.what());
				throw e;
			}
			try{
				tdx_xyzq_history_order_t_var.order_type = json_var.at("order_type").get<std::string>();
			}catch(const std::exception& e){
				ERR("{:} not found in json! e={:}", "order_type", e.what());
				throw e;
			}
		}catch (const std::exception& e){
			ERR("parse json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
	/* to json */
	static bool to_json(json& json_var, const tdx_xyzq_history_order_t& tdx_xyzq_history_order_t_var){
		try{
			json_var["date"] = tdx_xyzq_history_order_t_var.date;
			json_var["time_format"] = tdx_xyzq_history_order_t_var.time_format;
			json_var["time_utcSec"] = tdx_xyzq_history_order_t_var.time_utcSec;
			json_var["stock_code"] = tdx_xyzq_history_order_t_var.stock_code;
			json_var["stock_name"] = tdx_xyzq_history_order_t_var.stock_name;
			json_var["order_index"] = tdx_xyzq_history_order_t_var.order_index;
			json_var["opt_type"] = tdx_xyzq_history_order_t_var.opt_type;
			json_var["status"] = tdx_xyzq_history_order_t_var.status;
			json_var["order_price"] = tdx_xyzq_history_order_t_var.order_price;
			json_var["order_vol"] = tdx_xyzq_history_order_t_var.order_vol;
			json_var["deal_price"] = tdx_xyzq_history_order_t_var.deal_price;
			json_var["deal_vol"] = tdx_xyzq_history_order_t_var.deal_vol;
			json_var["order_type"] = tdx_xyzq_history_order_t_var.order_type;
		}catch (const std::exception& e){
		ERR("to json {:} \nfail:{:}", json_var.dump(4), e.what());
			return false;
		}
		return true;
	}
};// struct tdx_xyzq_history_order_t
} // namespace S4


    /* Tester */
    inline int tdx_xyzq_history_order_t_tester() {

        //std::ifstream i("E:/work/s4/./json_template/tdx_xyzq_history_order_t.json");
        std::string i("{    \"date\" : 20200507,    \"time_format\": \"19:55:30\",    \"time_utcSec\": 123,    \"stock_code\": \"002988\",    \"stock_name\": \"豪美新材\",    \"order_index\":26,    \"opt_type\":\"买入\",    \"status\":\"已报\",    \"order_price\":3.94,    \"order_vol\":5600,    \"deal_price\":0.0,    \"deal_vol\":0,    \"order_type\":\"买卖\"}");
        S4::json json_var;
        //i >> json_var; //from file
        json_var = S4::json::parse(i);  //from string

        S4::tdx_xyzq_history_order_t tdx_xyzq_history_order_t_var;

        if(!S4::tdx_xyzq_history_order_t::from_json(json_var, tdx_xyzq_history_order_t_var)){
            INFO("S4::tdx_xyzq_history_order_t::from_json fail!");
            return -1;
        }

        S4::json j_out;
        if(!S4::tdx_xyzq_history_order_t::to_json(j_out, tdx_xyzq_history_order_t_var)){
            INFO("S4::tdx_xyzq_history_order_t::to_json fail!");
            return -1;
        }

        INFO("{:}", j_out.dump(4));

        return 0;
    }

    