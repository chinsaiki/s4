/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: {0}
* Type name: {1}
* Tester:    int {1}_tester();
*
* Json keep-word: 
    "__default_value_fields__": [], # Take value in .json file as the default value of cpp variable
    "__optional_fields__": [], # Not require to present to .json file, but always in cpp struct
    "__assign_type_fields__": {{"field":"cpp-type"}}, # Assign specal cpp-type of field, but not infer automatically as default
    "__assign_set_lists__": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__comment__xxx":"", # Add comment line
    "__sqlite_capable__":"", # enable sqlite tableIO autogen
* Script author: ChenZaihui<chinsaiki@outlook.com>
*/
#pragma once


#include "types/s4type.h"
#include "db_sqlite/tableIO.h"
#include <SQLiteCpp/ExecuteMany.h>

#include "jsonTypes/s4_history_t.h"

namespace S4 {
namespace sqlite {

class s4_history_t_dbTbl : public tableIO_t<struct s4_history_t>{
public:
    typedef struct s4_history_t data_t;
	//s4_history_t_dbTbl(const std::string name)
    //{
    //    set_name(name);
    //};
    
	virtual void set_name(const std::string& name) override {
        m_name = name;
        m_qurey_build = "CREATE TABLE if not exists " + m_name + K_COL;
        m_qurey_insert = "INSERT OR IGNORE INTO " + m_name + K_IN;
    }

    virtual const std::string & get_query_build(void) const override { return m_qurey_build;};

    virtual const std::string & get_query_insert(void) const override { return m_qurey_insert;};
    
    virtual void bind_query(SQLite::Statement& query, const std::vector<struct s4_history_t>& data, size_t nb) override
    {
        const struct s4_history_t & K_data = data[nb];
        SQLite::bind(query,
			K_data.id,
			K_data.date,
			K_data.stgName,
			K_data.insCode,
			K_data.time_utcSec,
			K_data.datetime,
			K_data.optType,
			K_data.position,
			K_data.status,
			K_data.order_open,
			K_data.order_take,
			K_data.order_stop,
			K_data.order_close,
			K_data.order_vol,
			K_data.deal_open,
			K_data.deal_close,
			K_data.deal_vol,
			K_data.deal_amt,
			K_data.commission,
			K_data.stamp_duty,
			K_data.transfer_fee,
			K_data.other_fees,
			K_data.remarks);
    }

    //warning: not clear data inside, but append DB.data to it
    virtual void load_query(SQLite::Statement& query, std::vector<s4_history_t>& data) override
    {
        struct s4_history_t K_data;
        K_data.id = (int64_t)query.getColumn(0).getInt64();
		K_data.date = (time_date_t)query.getColumn(1).getInt64();
		K_data.stgName = query.getColumn(2).getString();
		K_data.insCode = query.getColumn(3).getString();
		K_data.time_utcSec = (time_utcSec_t)query.getColumn(4).getInt64();
		K_data.datetime = query.getColumn(5).getString();
		K_data.optType = query.getColumn(6).getString();
		K_data.position = query.getColumn(7).getString();
		K_data.status = query.getColumn(8).getString();
		K_data.order_open = (price_t)query.getColumn(9).getInt64();
		K_data.order_take = (price_t)query.getColumn(10).getInt64();
		K_data.order_stop = (price_t)query.getColumn(11).getInt64();
		K_data.order_close = (price_t)query.getColumn(12).getInt64();
		K_data.order_vol = query.getColumn(13).getInt64();
		K_data.deal_open = (price_t)query.getColumn(14).getInt64();
		K_data.deal_close = (price_t)query.getColumn(15).getInt64();
		K_data.deal_vol = (vol_share_t)query.getColumn(16).getInt64();
		K_data.deal_amt = (amount_t)query.getColumn(17).getDouble();
		K_data.commission = (amount_t)query.getColumn(18).getDouble();
		K_data.stamp_duty = (amount_t)query.getColumn(19).getDouble();
		K_data.transfer_fee = (amount_t)query.getColumn(20).getDouble();
		K_data.other_fees = (amount_t)query.getColumn(21).getDouble();
		K_data.remarks = query.getColumn(22).getString();
        data.push_back(std::move(K_data));
    }

private:
	//std::string m_name;
    std::string m_qurey_build;
    std::string m_qurey_insert;
private:

const std::string K_COL =
    "( "
        "id	INTEGER, "
        "date	INTEGER, "
        "stgName	TEXT, "
        "insCode	TEXT, "
        "time_utcSec	INTEGER, "
        "datetime	TEXT, "
        "optType	TEXT, "
        "position	TEXT, "
        "status	TEXT, "
        "order_open	INTEGER, "
        "order_take	INTEGER, "
        "order_stop	INTEGER, "
        "order_close	INTEGER, "
        "order_vol	INTEGER, "
        "deal_open	INTEGER, "
        "deal_close	INTEGER, "
        "deal_vol	INTEGER, "
        "deal_amt	DOUBLE, "
        "commission	DOUBLE, "
        "stamp_duty	DOUBLE, "
        "transfer_fee	DOUBLE, "
        "other_fees	DOUBLE, "
        "remarks	TEXT, "

        "PRIMARY KEY(id)"
    ")";



const std::string K_IN =
    "("
    "id, date, stgName, insCode, time_utcSec, datetime, optType, position, status, order_open, order_take, order_stop, order_close, order_vol, deal_open, deal_close, deal_vol, deal_amt, commission, stamp_duty, transfer_fee, other_fees, remarks"
    ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
;


};

}//namespace sqlite
}//namespace S4
