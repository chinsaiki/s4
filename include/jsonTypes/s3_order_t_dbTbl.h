/*
* DON'T TOUCH!
* This file is generated by python script AUTOMATICALLY!
*
* Generated base on: {0}
* Type name: {1}
* Tester:    int {1}_tester();
*
* Json keep-word: 
    "__default_value_fields__": [], # Take value in .json file as the default value of cpp variable
    "__optional_fields__": [], # Not require to present to .json file, but always in cpp struct
    "__assign_type_fields__": {{"field":"cpp-type"}}, # Assign specal cpp-type of field, but not infer automatically as default.
    "__assign_enum_fields__": {{"field":"enum-type"}}, # Assign specal enum-type of field, but not infer automatically as default.
                              enum-type need have implemented <enum-type>_toSting() & <enum-type>_fromString() functions.
    "__assign_set_lists__": [], # Take list in .json file as std::set<>, but not std::vector<> as default
    "__comment__xxx":"", # Add comment line
    "__sqlite_capable__":"", # enable sqlite tableIO autogen
    "__sqlite_primary__":"", # assign the primary key of sqlite, if not assigned, first existing col of [ 'id', 'date', 'mktCode', 'datetime', 'code'] will be assigned automatically.
* Script author: ChinSaiki<chinsaiki@outlook.com>
*/
#pragma once


#include "types/s4type.h"
#include "db_sqlite/tableIO.h"
#include <SQLiteCpp/ExecuteMany.h>

#include "jsonTypes/s3_order_t.h"

namespace S4 {
namespace sqlite {

class s3_order_t_dbTbl : public tableIO_t<struct s3_order_t>{
public:
    typedef struct s3_order_t data_t;
	//s3_order_t_dbTbl(const std::string name)
    //{
    //    set_name(name);
    //};
    
	virtual void set_name(const std::string& name) override {
        m_name = name;
        m_qurey_build = "CREATE TABLE if not exists " + m_name + K_COL;
        m_qurey_insert = "INSERT OR IGNORE INTO " + m_name + K_IN;
    }

    virtual const std::string & get_query_build(void) const override { return m_qurey_build;};

    virtual const std::string & get_query_insert(void) const override { return m_qurey_insert;};
    
    virtual void bind_query(SQLite::Statement& query, const std::vector<struct s3_order_t>& data, size_t nb) override
    {
        const struct s3_order_t & K_data = data[nb];
        query.bind(1, K_data.StgName);
		query.bind(2, K_data.ID);
		query.bind(3, K_data.InsName);
		query.bind(4, K_data.time);
		query.bind(5, K_data.optType);
		query.bind(6, K_data.status);
		query.bind(7, K_data.open);
		query.bind(8, K_data.take);
		query.bind(9, K_data.stop);
		query.bind(10, K_data.close);
		query.bind(11, K_data.openA);
		query.bind(12, K_data.closeA);
		query.bind(13, K_data.datetime);
    }

    //warning: not clear data inside, but append DB.data to it
    virtual void load_query(SQLite::Statement& query, std::vector<s3_order_t>& data) override
    {
        struct s3_order_t K_data;
        K_data.StgName = (std::string)query.getColumn(0).getString();
		K_data.ID = (int64_t)query.getColumn(1).getInt64();
		K_data.InsName = (std::string)query.getColumn(2).getString();
		K_data.time = (time_utcSec_t)query.getColumn(3).getInt64();
		K_data.optType = (std::string)query.getColumn(4).getString();
		K_data.status = (std::string)query.getColumn(5).getString();
		K_data.open = (int)query.getColumn(6).getInt64();
		K_data.take = (int)query.getColumn(7).getInt64();
		K_data.stop = (int)query.getColumn(8).getInt64();
		K_data.close = (int)query.getColumn(9).getInt64();
		K_data.openA = (int)query.getColumn(10).getInt64();
		K_data.closeA = (int)query.getColumn(11).getInt64();
		K_data.datetime = (std::string)query.getColumn(12).getString();
        data.push_back(std::move(K_data));
    }

private:
	//std::string m_name;
    std::string m_qurey_build;
    std::string m_qurey_insert;
private:

const std::string K_COL =
    "( "
        "StgName	TEXT, "
        "ID	INTEGER, "
        "InsName	TEXT, "
        "time	INTEGER, "
        "optType	TEXT, "
        "status	TEXT, "
        "open	INTEGER, "
        "take	INTEGER, "
        "stop	INTEGER, "
        "close	INTEGER, "
        "openA	INTEGER, "
        "closeA	INTEGER, "
        "datetime	TEXT, "

        "PRIMARY KEY(ID, time, status)"
    ")";



const std::string K_IN =
    "("
    "StgName, ID, InsName, time, optType, status, open, take, stop, close, openA, closeA, datetime"
    ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)"
;


};

}//namespace sqlite
}//namespace S4
